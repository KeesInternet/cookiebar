<?php

/**
 * @file
 * Cookiebar module file.
 */

use Drupal\Core\Url;

// Globals.
$GLOBALS["cookie_name"] = 'CookieConsent';

/**
 * Implements hook_theme().
 */
function kees_cookiebar_theme($existing, $type, $theme, $path) {
  // This defines the variables that will be useable in the templates.
  return [
    'kees_cookiebar' => [
      'variables' => [
        'label' => NULL,
        'cookies' => NULL,
        'text' => NULL,
        'accept_button_text' => NULL,
        'decline_button_text' => NULL,
      ],
    ],
    'kees_cookiebar_advanced' => [
      'variables' => [
        'label' => NULL,
        'cookies' => NULL,
        'text' => NULL,
        'accept_button_text' => NULL,
        'decline_button_text' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_page_attachments().
 */
function kees_cookiebar_page_attachments(array &$attachments) {
  $is_admin = \Drupal::service('router.admin_context')->isAdminRoute();
  if ($is_admin) {
    $attachments['#attached']['library'][] = 'kees_cookiebar/cookiebar-css-admin';
    return;
  }
}

/**
 * Implements hook_preprocess().
 */
function kees_cookiebar_preprocess(&$variables) {
  $variables['kees_cookie_value'] = GetCookieValue();
}

/**
 * Implements hook_preprocess_html().
 */
function kees_cookiebar_preprocess_html(&$variables) {
  $config = \Drupal::configFactory()->getEditable('kees_cookiebar.settings');
  $cookiepage_path = $config->get('kees_cookiebar.cookiepage_path');
  if (empty($cookiepage_path)) {
    $cookiepage_path = "/cookies";
    $config->set('kees_cookiebar.cookiepage_path', $cookiepage_path);
    $config->save();
  }

  $current_language = Drupal::languageManager()->getCurrentLanguage();
  $default_lang = Drupal::languageManager()->getDefaultLanguage();
  $homeUrl = Url::fromRoute('<front>', [], ['language' => $current_language]);
  $currentUrl = Url::fromRoute('<current>', [], ['language' => $default_lang]);

  $variables['#attached']['drupalSettings']['keesCookiebarConfig'] = [
    'cookiepagePath' => $cookiepage_path,
    'homeUrl' => $homeUrl->toString(),
    'currentUrl' => $currentUrl->toString(),
  ];
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function kees_cookiebar_menu_local_tasks_alter(&$data, $route_name) {
  $config = \Drupal::config('kees_cookiebar.settings');
  $cookiebar_type = $config->get('kees_cookiebar.cookiebar_type');

  if ($cookiebar_type === "0") {
    unset($data['tabs'][0]['kees_cookiebar.config']);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function kees_cookiebar_theme_suggestions_kees_cookiebar(array $variables) : array {
  return ['kees_cookiebar_default'];
}

/**
 * Implement helper function get_cookie_value()
 *
 * To get the value of the cookie set by this module.
 *
 * @return mixed
 *   Returns either the json encode cookie values.
 */
function get_cookie_value() {
  $cookie_value = \Drupal::request()->cookies->get($GLOBALS["cookie_name"]);

  if (is_json($cookie_value)) {
    // For (advanced) cookieblock.
    return json_decode($cookie_value, TRUE);
  }
  else {
    // For (deafult) cookiebar.
    return $cookie_value;
  }

  return FALSE;
}

/**
 * Implement helper function is_json().
 *
 * @param mixed $string
 *   String to check if it's JSON.
 *
 * @return bool
 *   Returns TRUE if JSON else FALSE.
 */
function is_json($string) : bool {
  return is_string($string) && is_array(json_decode($string, TRUE)) ? TRUE : FALSE;
}

/**
 * Add new options to configuration.
 */
function kees_cookiebar_update_8001() {
  $config = \Drupal::configFactory()->getEditable('kees_cookiebar.settings');

  $cookies['primary_cookies'] = [
    'label' => 'Primary Cookies',
    'desc' => "",
  ];
  $config->set('kees_cookiebar.settings_cookies', $cookies);
  $config->set('kees_cookiebar.cookiebar_type', '0');
  $config->set('kees_cookiebar.cookiepage_path', '/cookies');

  $config->save(TRUE);
}
